from langchain_google_genai import ChatGoogleGenerativeAI
import os
os.environ["GOOGLE_API_KEY"] = "AIzaSyDzyARw95GU-P6HHfAKdAicnQNLWWQHC18"
llm = ChatGoogleGenerativeAI(
    model="gemini-2.0-flash",
    temperature=0,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from datetime import datetime
import os
import logging
import platform

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class StudentReportService:
    def __init__(self):
        self.llm = llm
        self.prompt = PromptTemplate(
            input_variables=["text"],
            template="""
D∆∞·ªõi ƒë√¢y l√† th√¥ng tin h·ªçc t·∫≠p c·ªßa m·ªôt sinh vi√™n:

{text}

H√£y t·∫°o b√°o c√°o ƒë√°nh gi√° h·ªçc t·∫≠p d∆∞·ªõi d·∫°ng HTML ho√†n ch·ªânh v·ªõi c√°c y√™u c·∫ßu sau:

1. ƒê√°nh gi√° s·ª± thay ƒë·ªïi trong k·∫øt qu·∫£ h·ªçc t·∫≠p qua t·ª´ng h·ªçc k·ª≥
2. Nh·∫≠n ƒë·ªãnh v·ªÅ xu h∆∞·ªõng h·ªçc l·ª±c hi·ªán t·∫°i  
3. ƒê∆∞a ra ƒë·ªÅ xu·∫•t th·ª±c t·∫ø nh·∫±m duy tr√¨ ho·∫∑c n√¢ng cao k·∫øt qu·∫£ h·ªçc t·∫≠p
4. Th√™m nh·∫≠n x√©t t·ªïng k·∫øt v√† l∆∞u √Ω c·∫ßn thi·∫øt
5. Tr·∫£ l·ªùi v·ªõi t√¥ng ƒëi·ªáu c·ªßa c·ªë v·∫•n h·ªçc t·∫≠p chuy√™n nghi·ªáp

Tr·∫£ v·ªÅ HTML ho√†n ch·ªânh v·ªõi c·∫•u tr√∫c sau:
- DOCTYPE html v·ªõi encoding UTF-8
- CSS inline styling chuy√™n nghi·ªáp (m√†u xanh d∆∞∆°ng ch·ªß ƒë·∫°o)
- Header: "B√ÅO C√ÅO ƒê√ÅNH GI√Å H·ªåC T·∫¨P SINH VI√äN"
- Th√¥ng tin c∆° b·∫£n sinh vi√™n trong b·∫£ng
- Bi·ªÉu ƒë·ªì xu h∆∞·ªõng ƒëi·ªÉm s·ªë (text-based chart)
- Ph·∫ßn "ƒê√ÅNH GI√Å K·ªÇT QU·∫¢ H·ªåC T·∫¨P" v·ªõi bullet points
- Ph·∫ßn "ƒê·ªÄ XU·∫§T H∆Ø·ªöNG PH√ÅT TRI·ªÇN" v·ªõi action items  
- Footer v·ªõi th·ªùi gian t·∫°o b√°o c√°o v√† ch·ªØ k√Ω c·ªë v·∫•n

CSS styling y√™u c·∫ßu:
- Font ch·ªØ Arial/sans-serif
- M√†u ch·ªß ƒë·∫°o: #2E86AB (xanh d∆∞∆°ng)
- Background: #F8F9FA
- Border radius cho c√°c card
- Shadow effects nh·∫π
- Spacing h·ª£p l√Ω
- Print-friendly

HTML ph·∫£i ho√†n ch·ªânh v√† render ƒë∆∞·ª£c tr·ª±c ti·∫øp tr√™n browser.
"""
        )
        self.chain = LLMChain(llm=self.llm, prompt=self.prompt)

    def generate_html_report(self, student_data: str, output_dir: str = ".") -> tuple:
        try:
            logger.info("üîÑ ƒêang t·∫°o b√°o c√°o HTML...")
            
            html_output = self.chain.run(text=student_data)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            html_filename = os.path.join(output_dir, f"bao_cao_hoc_tap_{timestamp}.html")
            
            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_output)
            
            logger.info(f"‚úÖ ƒê√£ t·∫°o b√°o c√°o HTML: {html_filename}")
            return html_filename, html_output
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o HTML: {str(e)}")
            raise

    def convert_html_to_pdf(self, html_filename: str) -> str:
        """Chuy·ªÉn ƒë·ªïi HTML sang PDF s·ª≠ d·ª•ng ReportLab"""
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib import colors
            from reportlab.lib.units import inch, cm
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont
            from bs4 import BeautifulSoup
            
            pdf_filename = html_filename.replace('.html', '.pdf')
            logger.info(f"üîÑ ƒêang chuy·ªÉn ƒë·ªïi HTML sang PDF: {pdf_filename}")
            
            # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
            font_name = "Helvetica"  # Default font
            try:
                if platform.system() == "Windows":
                    # S·ª≠ d·ª•ng font c√≥ s·∫µn tr√™n Windows
                    font_paths = [
                        "C:/Windows/Fonts/arial.ttf",
                        "C:/Windows/Fonts/ArialUnicodeMS.ttf", 
                        "C:/Windows/Fonts/calibri.ttf",
                        "C:/Windows/Fonts/times.ttf"
                    ]
                    
                    for font_path in font_paths:
                        if os.path.exists(font_path):
                            try:
                                pdfmetrics.registerFont(TTFont('VietnameseFont', font_path))
                                font_name = "VietnameseFont"
                                logger.info(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω font: {font_path}")
                                break
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font {font_path}: {e}")
                                continue
                                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh do l·ªói: {e}")
            
            # ƒê·ªçc file HTML v·ªõi encoding UTF-8
            with open(html_filename, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # Parse HTML
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # T·∫°o PDF document
            doc = SimpleDocTemplate(
                pdf_filename,
                pagesize=A4,
                rightMargin=2*cm,
                leftMargin=2*cm,
                topMargin=2*cm,
                bottomMargin=2*cm
            )
            
            # T·∫°o styles v·ªõi font h·ªó tr·ª£ ti·∫øng Vi·ªát
            styles = getSampleStyleSheet()
            
            # Style cho ti√™u ƒë·ªÅ ch√≠nh
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Title'],
                fontName=font_name,
                fontSize=18,
                spaceAfter=30,
                textColor=colors.HexColor('#2E86AB'),
                alignment=1,  # Center
            )
            
            # Style cho ti√™u ƒë·ªÅ section
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading1'],
                fontName=font_name,
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#2E86AB'),
                leftIndent=0
            )
            
            # Style cho vƒÉn b·∫£n th∆∞·ªùng
            normal_style = ParagraphStyle(
                'CustomNormal',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=11,
                spaceAfter=6,
                leading=14,
                textColor=colors.black
            )
            
            # Style cho th√¥ng tin sinh vi√™n
            info_style = ParagraphStyle(
                'InfoStyle',
                parent=styles['Normal'],
                fontName=font_name,
                fontSize=10,
                textColor=colors.HexColor('#666666')
            )
            
            story = []
            
            # L·∫•y title
            title_tag = soup.find('h1')
            if title_tag:
                title_text = title_tag.get_text(strip=True)
                story.append(Paragraph(title_text, title_style))
                story.append(Spacer(1, 20))
            
            # L·∫•y th√¥ng tin sinh vi√™n t·ª´ table
            table_tag = soup.find('table')
            if table_tag:
                rows = table_tag.find_all('tr')
                table_data = []
                for row in rows:
                    cells = row.find_all(['td', 'th'])
                    if len(cells) >= 2:
                        key = cells[0].get_text(strip=True)
                        value = cells[1].get_text(strip=True)
                        table_data.append([key, value])
                
                if table_data:
                    # T·∫°o table cho th√¥ng tin sinh vi√™n
                    t = Table(table_data, colWidths=[4*cm, 8*cm])
                    t.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#F8F9FA')),
                        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, -1), font_name),
                        ('FONTSIZE', (0, 0), (-1, -1), 10),
                        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#E0E0E0')),
                        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                        ('LEFTPADDING', (0, 0), (-1, -1), 8),
                        ('RIGHTPADDING', (0, 0), (-1, -1), 8),
                        ('TOPPADDING', (0, 0), (-1, -1), 6),
                        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                    ]))
                    story.append(t)
                    story.append(Spacer(1, 20))
            
            # L·∫•y n·ªôi dung c√°c section
            sections = soup.find_all(['h2', 'h3'])
            
            for section in sections:
                # Th√™m ti√™u ƒë·ªÅ section
                section_title = section.get_text(strip=True)
                if section_title and 'B√ÅO C√ÅO' not in section_title.upper():
                    story.append(Paragraph(section_title, heading_style))
                
                # L·∫•y n·ªôi dung sau section
                next_sibling = section.find_next_sibling()
                section_content = ""
                
                while next_sibling and next_sibling.name not in ['h1', 'h2', 'h3']:
                    if next_sibling.name == 'p':
                        section_content += next_sibling.get_text(strip=True) + "<br/><br/>"
                    elif next_sibling.name == 'ul':
                        for li in next_sibling.find_all('li'):
                            section_content += "‚Ä¢ " + li.get_text(strip=True) + "<br/>"
                        section_content += "<br/>"
                    elif next_sibling.name == 'div':
                        div_text = next_sibling.get_text(strip=True)
                        if div_text:
                            section_content += div_text + "<br/><br/>"
                    elif next_sibling.string:
                        section_content += next_sibling.string.strip() + " "
                    next_sibling = next_sibling.find_next_sibling()
                
                if section_content.strip():
                    # L√†m s·∫°ch v√† format text
                    section_content = section_content.replace('<br/><br/><br/>', '<br/><br/>')
                    story.append(Paragraph(section_content, normal_style))
                    story.append(Spacer(1, 15))
            
            # Th√™m footer
            footer_text = f"B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông v√†o {datetime.now().strftime('%d/%m/%Y l√∫c %H:%M:%S')}"
            story.append(Spacer(1, 30))
            story.append(Paragraph(footer_text, info_style))
            
            # Build PDF
            doc.build(story)
            
            logger.info(f"‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng: {pdf_filename}")
            return pdf_filename
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o PDF: {e}")
            raise e

    def generate_complete_report(self, student_data: str, output_dir: str = ".") -> dict:
        """T·∫°o b√°o c√°o ho√†n ch·ªânh HTML + PDF"""
        try:
            # T·∫°o HTML report
            html_file, html_content = self.generate_html_report(student_data, output_dir)
            
            # Chuy·ªÉn ƒë·ªïi sang PDF
            pdf_file = self.convert_html_to_pdf(html_file)
            
            return {
                'success': True,
                'html_file': html_file,
                'pdf_file': pdf_file,
                'html_content': html_content,
                'message': '‚úÖ B√°o c√°o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!'
            }
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'message': f'‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}'
            }

# Instance ƒë·ªÉ s·ª≠ d·ª•ng
report_service = StudentReportService()

if __name__ == "__main__":
    # Test data
    sample_data = """
    Th√¥ng tin sinh vi√™n:
    - M√£ sinh vi√™n: 20221234
    - H·ªç t√™n: Nguy·ªÖn VƒÉn An
    - L·ªõp: CNTT01-K16
    - S·ªë m√¥n ƒë√£ h·ªçc: 20
    - S·ªë h·ªçc k·ª≥ ƒë√£ ho√†n th√†nh: 5
    - CPA hi·ªán t·∫°i: 1.5
    - T·ªïng s·ªë t√≠n ch·ªâ t√≠ch l≈©y: 50
    - C·∫£nh b√°o h·ªçc v·ª• hi·ªán t·∫°i: M·ª©c 2
    
    Chi ti·∫øt theo t·ª´ng h·ªçc k·ª≥:
    | H·ªçc k·ª≥ | CPA   | T√≠n ch·ªâ t√≠ch l≈©y | C·∫£nh b√°o h·ªçc v·ª• |
    |--------|-------|------------------|------------------|
    | 20221  | 1.38  | 9.0              | M·ª©c 0            |
    | 20222  | 2.18  | 14.0             | M·ª©c 1            |
    | 20231  | 1.2   | 20.0             | M·ª©c 2            |
    | 20232  | 2.0   | 35.0             | M·ª©c 2            |
    | 20241  | 1.3   | 50.0             | M·ª©c 1            |
    """
    
    print("üöÄ B·∫Øt ƒë·∫ßu test t·∫°o b√°o c√°o...")
    result = report_service.generate_complete_report(sample_data)
    
    if result['success']:
        print(f"‚úÖ {result['message']}")
        print(f"üìÑ HTML: {result['html_file']}")
        print(f"üìÑ PDF: {result['pdf_file']}")
    else:
        print(f"‚ùå {result['message']}")
